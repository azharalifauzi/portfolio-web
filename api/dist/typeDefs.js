"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var apollo_server_express_1 = require("apollo-server-express");
var typeDefs = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n  scalar Upload\n  scalar DateTime\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    projects(sortBy: SortProject, sort: Sort, filter: FilterProject): [Project]\n  }\n\n  type Mutation {\n    createProject(project: CreateProjectInput): Project\n    deleteProject(id: String): String\n    updateProject(id: String, data: UpdateProjectInput): Project\n    uploadImage(info: UploadImageInput, file: Upload!): ImageProject\n    updateImage(id: String, info: UpdateImageInput, file: Upload): ImageProject\n    deleteImage(id: String): String\n    provideSecretKey(secret: String): String\n  }\n\n  input FilterProject {\n    isOnGoing: Boolean\n    isArchive: Boolean\n    isFeatured: Boolean\n    id: String\n  }\n\n  enum SortProject {\n    createdAt\n    year\n    name\n  }\n\n  enum Sort {\n    asc\n    desc\n  }\n\n  type Project {\n    id: String!\n    createdAt: DateTime!\n    name: String!\n    year: String!\n    madeAt: String\n    builtWith: [String!]!\n    links: [Link!]!\n    isArchive: Boolean!\n    images: [ImageProject!]!\n    isFeatured: Boolean!\n    description: String!\n    achievements: [String!]!\n    isOnGoing: Boolean!\n    role: String\n  }\n\n  type ImageProject {\n    id: String!\n    url: String!\n    alt: String\n    project: Project\n    projectID: String!\n    isPrimary: Boolean!\n  }\n\n  type Link {\n    id: String!\n    type: LinkType\n    link: String\n    projectID: String!\n    project: Project\n  }\n\n  enum LinkType {\n    github\n    website\n  }\n\n  input LinkInput {\n    type: LinkType\n    link: String\n  }\n\n  input CreateProjectInput {\n    name: String!\n    year: String!\n    madeAt: String\n    builtWith: [String]\n    links: [LinkInput]\n    isArchive: Boolean = false\n    isFeatured: Boolean = false\n    description: String!\n    achievements: [String!]\n    isOnGoing: Boolean = false\n    role: String\n  }\n\n  input UpdateProjectInput {\n    name: String\n    year: String\n    madeAt: String\n    builtWith: [String]\n    links: [LinkInput]\n    isArchive: Boolean\n    isFeatured: Boolean\n    description: String\n    achievements: [String]\n    isOnGoing: Boolean\n    role: String\n  }\n\n  input UploadImageInput {\n    alt: String\n    isPrimary: Boolean!\n    projectID: String!\n  }\n\n  input UpdateImageInput {\n    alt: String\n    isPrimary: Boolean\n  }\n"], ["\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n  scalar Upload\n  scalar DateTime\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    projects(sortBy: SortProject, sort: Sort, filter: FilterProject): [Project]\n  }\n\n  type Mutation {\n    createProject(project: CreateProjectInput): Project\n    deleteProject(id: String): String\n    updateProject(id: String, data: UpdateProjectInput): Project\n    uploadImage(info: UploadImageInput, file: Upload!): ImageProject\n    updateImage(id: String, info: UpdateImageInput, file: Upload): ImageProject\n    deleteImage(id: String): String\n    provideSecretKey(secret: String): String\n  }\n\n  input FilterProject {\n    isOnGoing: Boolean\n    isArchive: Boolean\n    isFeatured: Boolean\n    id: String\n  }\n\n  enum SortProject {\n    createdAt\n    year\n    name\n  }\n\n  enum Sort {\n    asc\n    desc\n  }\n\n  type Project {\n    id: String!\n    createdAt: DateTime!\n    name: String!\n    year: String!\n    madeAt: String\n    builtWith: [String!]!\n    links: [Link!]!\n    isArchive: Boolean!\n    images: [ImageProject!]!\n    isFeatured: Boolean!\n    description: String!\n    achievements: [String!]!\n    isOnGoing: Boolean!\n    role: String\n  }\n\n  type ImageProject {\n    id: String!\n    url: String!\n    alt: String\n    project: Project\n    projectID: String!\n    isPrimary: Boolean!\n  }\n\n  type Link {\n    id: String!\n    type: LinkType\n    link: String\n    projectID: String!\n    project: Project\n  }\n\n  enum LinkType {\n    github\n    website\n  }\n\n  input LinkInput {\n    type: LinkType\n    link: String\n  }\n\n  input CreateProjectInput {\n    name: String!\n    year: String!\n    madeAt: String\n    builtWith: [String]\n    links: [LinkInput]\n    isArchive: Boolean = false\n    isFeatured: Boolean = false\n    description: String!\n    achievements: [String!]\n    isOnGoing: Boolean = false\n    role: String\n  }\n\n  input UpdateProjectInput {\n    name: String\n    year: String\n    madeAt: String\n    builtWith: [String]\n    links: [LinkInput]\n    isArchive: Boolean\n    isFeatured: Boolean\n    description: String\n    achievements: [String]\n    isOnGoing: Boolean\n    role: String\n  }\n\n  input UploadImageInput {\n    alt: String\n    isPrimary: Boolean!\n    projectID: String!\n  }\n\n  input UpdateImageInput {\n    alt: String\n    isPrimary: Boolean\n  }\n"])));
exports.typeDefs = typeDefs;
var templateObject_1;
