version: "3.8"

services:
  # server service
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: portfolio-web-server
    container_name: portfolio-web-server
    ports:
      - "8082:80" # Connect localhost 80 port to container 80 port
      - "8083:443"
    networks:
      - portfolio-network
    volumes:
      - ./server/nginx/${BUILD_TARGET}/:/etc/nginx/
  # filestream service
  filestream:
    build:
      context: ./filestream
      dockerfile: Dockerfile
      target: ${BUILD_TARGET}
    image: azharalifauzi/portfolio-web-filestream
    container_name: portfolio-web-filestream
    ports:
      - "4000"
    volumes:
      - ./filestream/:/app
      - /app/images/
      - /dist/images/
    networks:
      - portfolio-network
    environment:
      - PORT=4000
  # api service
  graphql:
    build:
      context: ./api
      target: ${BUILD_TARGET}
      dockerfile: Dockerfile
    image: azharalifauzi/pw-gql
    container_name: pw-gql
    volumes:
      - ./api/:/app
      - /app/node_modules
      - /app/dist
    ports:
      - "5000"
    depends_on:
      - postgres
    environment:
      - GRAPHQL_SECRET_KEY=${GRAPHQL_SECRET_KEY}
      - POSTGRES_URL=${POSTGRES_URL}
    networks:
      - portfolio-network
  # postgres service
  postgres:
    image: postgres
    volumes:
      - data-volume:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - portfolio-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
  # client service
  client:
    build:
      context: ./client
      target: ${BUILD_TARGET}
      dockerfile: Dockerfile
    image: azharalifauzi/portfolio-web-client
    container_name: portfolio-web-client
    volumes:
      - type: bind
        source: ./client/
        target: /app
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3000"
    networks:
      - portfolio-network
    environment:
      - CHOKIDAR_USEPOLLING=true
      - GRAPHQL_CLIENT_URL=${GRAPHQL_CLIENT_URL} # useful for building isr inside ci / cd pipeline

networks:
  portfolio-network:
    driver: bridge

volumes:
  data-volume:
  node_modules:
  web-root:
    driver: local
